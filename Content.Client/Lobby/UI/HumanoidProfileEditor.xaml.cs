using System.IO;
using System.Linq;
using System.Numerics;
using Content.Client.Guidebook;
using Content.Client.Humanoid;
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
using Content.Client.Lobby.UI.Loadouts;
using Content.Client.Lobby.UI.Roles;
=======
using Content.Client.Lobby.UI;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
using Content.Client.Message;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.UserInterface.Systems.Guidebook;
using Content.Shared.CCVar;
using Content.Shared.Loadout;
using Content.Shared.GameTicking;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Inventory;
using Content.Shared.Preferences;
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
using Content.Shared.Preferences.Loadouts;
=======
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
using Content.Shared.Roles;
using Content.Shared.StatusIcon;
using Content.Shared.Traits;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Configuration;
using Robust.Shared.Enums;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Random;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using Content.Shared.Ganimed.SponsorManager;
using Robust.Client.Player;
using static Robust.Client.UserInterface.Controls.BoxContainer;
using Direction = Robust.Shared.Maths.Direction;

namespace Content.Client.Lobby.UI
{
    public sealed class HighlightedContainer : PanelContainer
    {
        public HighlightedContainer()
        {
            PanelOverride = new StyleBoxFlat()
            {
                BackgroundColor = new Color(47, 47, 53),
                ContentMarginTopOverride = 10,
                ContentMarginBottomOverride = 10,
                ContentMarginLeftOverride = 10,
                ContentMarginRightOverride = 10
            };
        }
    }

    [GenerateTypedNameReferences]
    public sealed partial class HumanoidProfileEditor : Control
    {
        private readonly IClientPreferencesManager _preferencesManager;
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
        private readonly IConfigurationManager _cfgManager;
        private readonly IEntityManager _entManager;
        private readonly IFileDialogManager _dialogManager;
        private readonly IPlayerManager _playerManager;
        private readonly IPrototypeManager _prototypeManager;
        private readonly MarkingManager _markingManager;
        private readonly JobRequirementsManager _requirements;
        private readonly LobbyUIController _controller;

        private FlavorText.FlavorText? _flavorText;
        private TextEdit? _flavorTextEdit;

        // One at a time.
        private LoadoutWindow? _loadoutWindow;

        private bool _exporting;

        /// <summary>
        /// If we're attempting to save.
        /// </summary>
        public event Action? Save;

        /// <summary>
        /// Entity used for the profile editor preview
        /// </summary>
        public EntityUid PreviewDummy;

        /// <summary>
        /// Temporary override of their selected job, used to preview roles.
        /// </summary>
        public JobPrototype? JobOverride;

        /// <summary>
        /// The character slot for the current profile.
        /// </summary>
        public int? CharacterSlot;

        /// <summary>
        /// The work in progress profile being edited.
        /// </summary>
        public HumanoidCharacterProfile? Profile;

        private List<SpeciesPrototype> _species = new();

        private List<(string, RequirementsSelector)> _jobPriorities = new();

        private readonly Dictionary<string, BoxContainer> _jobCategories;
=======
        private readonly IEntityManager _entMan;
		private readonly IPlayerManager _playerManager;
        private readonly IConfigurationManager _configurationManager;
        private readonly MarkingManager _markingManager;
        private readonly JobRequirementsManager _requirements;
		private readonly SponsorManager _sponsorManager;

        private LineEdit _ageEdit => CAgeEdit;
        private LineEdit _nameEdit => CNameEdit;
        private TextEdit _flavorTextEdit = null!;
        private Button _nameRandomButton => CNameRandomize;
        private Button _randomizeEverythingButton => CRandomizeEverything;
        private RichTextLabel _warningLabel => CWarningLabel;
        private Button _saveButton => CSaveButton;
        private OptionButton _sexButton => CSexButton;
        private OptionButton _genderButton => CPronounsButton;
        private Slider _skinColor => CSkin;
        private OptionButton _clothingButton => CClothingButton;
        private OptionButton _backpackButton => CBackpackButton;
        private OptionButton _spawnPriorityButton => CSpawnPriorityButton;
        private SingleMarkingPicker _hairPicker => CHairStylePicker;
        private SingleMarkingPicker _facialHairPicker => CFacialHairPicker;
        private EyeColorPicker _eyesPicker => CEyeColorPicker;
        private SpeakerColorPicker _speakerPicker => CSpeakerColorPicker;

        private TabContainer _tabContainer => CTabContainer;
        private BoxContainer _jobList => CJobList;
        private BoxContainer _antagList => CAntagList;
        private BoxContainer _traitsList => CTraitsList;
		private ProgressBar _loadoutPoints => LoadoutPoints;
        private BoxContainer _loadoutsTab => CLoadoutsTab;
        private TabContainer _loadoutsTabs => CLoadoutsTabs;
        private int BaseStartLoadoutPoints = 14;
		private int SponsorStartLoadoutPoints = 20;
        private readonly List<JobPrioritySelector> _jobPriorities;
        private OptionButton _preferenceUnavailableButton => CPreferenceUnavailableButton;
        private readonly Dictionary<string, BoxContainer> _jobCategories;
        // Mildly hacky, as I don't trust prototype order to stay consistent and don't want the UI to break should a new one get added mid-edit. --moony
        private readonly List<SpeciesPrototype> _speciesList;
        private readonly List<AntagPreferenceSelector> _antagPreferences;
        private readonly List<TraitPreferenceSelector> _traitPreferences;
        private readonly List<LoadoutPreferenceSelector>? _loadoutPreferences;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs

        private Direction _previewRotation = Direction.North;
        private EntityUid? _previewDummy;

        private ColorSelectorSliders _rgbSkinColorSelector;

        private bool _isDirty;
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs

        [ValidatePrototypeId<GuideEntryPrototype>]
        private const string DefaultSpeciesGuidebook = "Species";

        private ISawmill _sawmill;

        public HumanoidProfileEditor(
            IClientPreferencesManager preferencesManager,
            IConfigurationManager configurationManager,
            IEntityManager entManager,
            IFileDialogManager dialogManager,
            ILogManager logManager,
            IPlayerManager playerManager,
            IPrototypeManager prototypeManager,
            JobRequirementsManager requirements,
            MarkingManager markings)
=======
        private bool _needUpdatePreview;
        public int CharacterSlot;
        public HumanoidCharacterProfile? Profile;
        private MarkingSet _markingSet = new(); // storing this here feels iffy but a few things need it this high up

        public event Action<HumanoidCharacterProfile, int>? OnProfileChanged;

        public HumanoidProfileEditor(IClientPreferencesManager preferencesManager, IPrototypeManager prototypeManager,
            IEntityManager entityManager, IConfigurationManager configurationManager, IPlayerManager playerManager)
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
        {
            RobustXamlLoader.Load(this);
            _sawmill = logManager.GetSawmill("profile.editor");
            _cfgManager = configurationManager;
            _entManager = entManager;
            _dialogManager = dialogManager;
            _playerManager = playerManager;
            _prototypeManager = prototypeManager;
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
            _markingManager = markings;
            _preferencesManager = preferencesManager;
            _requirements = requirements;
            _controller = UserInterfaceManager.GetUIController<LobbyUIController>();

            ImportButton.OnPressed += args =>
            {
                ImportProfile();
            };

            ExportButton.OnPressed += args =>
            {
                ExportProfile();
            };

            ResetButton.OnPressed += args =>
            {
                SetProfile((HumanoidCharacterProfile?) _preferencesManager.Preferences?.SelectedCharacter, _preferencesManager.Preferences?.SelectedCharacterIndex);
            };

            SaveButton.OnPressed += args =>
            {
                Save?.Invoke();
            };
=======
            _entMan = entityManager;
            _playerManager = playerManager;
            _preferencesManager = preferencesManager;
            _configurationManager = configurationManager;
            _markingManager = IoCManager.Resolve<MarkingManager>();

            SpeciesInfoButton.ToolTip = Loc.GetString("humanoid-profile-editor-guidebook-button-tooltip");
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs

            #region Left

            #region Randomize

            #endregion Randomize

            #region Name

            NameEdit.OnTextChanged += args => { SetName(args.Text); };
            NameRandomize.OnPressed += args => RandomizeName();
            RandomizeEverythingButton.OnPressed += args => { RandomizeEverything(); };
            WarningLabel.SetMarkup($"[color=red]{Loc.GetString("humanoid-profile-editor-naming-rules-warning")}[/color]");

            #endregion Name

            #region Appearance

            TabContainer.SetTabTitle(0, Loc.GetString("humanoid-profile-editor-appearance-tab"));

            ShowClothes.OnPressed += ToggleClothes;
			ShowLoadout.OnPressed += ToggleLoadout;

            #region Sex

            SexButton.OnItemSelected += args =>
            {
                SexButton.SelectId(args.Id);
                SetSex((Sex) args.Id);
            };

            #endregion Sex

            #region Age

            AgeEdit.OnTextChanged += args =>
            {
                if (!int.TryParse(args.Text, out var newAge))
                    return;

                SetAge(newAge);
            };

            #endregion Age

            #region Gender

            PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-male-text"), (int) Gender.Male);
            PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-female-text"), (int) Gender.Female);
            PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-epicene-text"), (int) Gender.Epicene);
            PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-neuter-text"), (int) Gender.Neuter);

            PronounsButton.OnItemSelected += args =>
            {
                PronounsButton.SelectId(args.Id);
                SetGender((Gender) args.Id);
            };

            #endregion Gender

            RefreshSpecies();

            SpeciesButton.OnItemSelected += args =>
            {
                SpeciesButton.SelectId(args.Id);
                SetSpecies(_species[args.Id].ID);
                UpdateHairPickers();
                OnSkinColorOnValueChanged();
            };

            #region Skin

            Skin.OnValueChanged += _ =>
            {
                OnSkinColorOnValueChanged();
            };

            RgbSkinColorContainer.AddChild(_rgbSkinColorSelector = new ColorSelectorSliders());
            _rgbSkinColorSelector.OnColorChanged += _ =>
            {
                OnSkinColorOnValueChanged();
            };

            #endregion

            #region Hair

            HairStylePicker.OnMarkingSelect += newStyle =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithHairStyleName(newStyle.id));
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
                ReloadPreview();
=======
                IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            };

            HairStylePicker.OnColorChanged += newColor =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithHairColor(newColor.marking.MarkingColors[0]));
                UpdateCMarkingsHair();
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
                ReloadPreview();
=======
                IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            };

            FacialHairPicker.OnMarkingSelect += newStyle =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithFacialHairStyleName(newStyle.id));
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
                ReloadPreview();
=======
                IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            };

            FacialHairPicker.OnColorChanged += newColor =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithFacialHairColor(newColor.marking.MarkingColors[0]));
                UpdateCMarkingsFacialHair();
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
                ReloadPreview();
=======
                IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            };

            HairStylePicker.OnSlotRemove += _ =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithHairStyleName(HairStyles.DefaultHairStyle)
                );
                UpdateHairPickers();
                UpdateCMarkingsHair();
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
                ReloadPreview();
=======
                IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            };

            FacialHairPicker.OnSlotRemove += _ =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithFacialHairStyleName(HairStyles.DefaultFacialHairStyle)
                );
                UpdateHairPickers();
                UpdateCMarkingsFacialHair();
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
                ReloadPreview();
=======
                IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            };

            HairStylePicker.OnSlotAdd += delegate()
            {
                if (Profile is null)
                    return;

                var hair = _markingManager.MarkingsByCategoryAndSpecies(MarkingCategories.Hair, Profile.Species).Keys
                    .FirstOrDefault();

                if (string.IsNullOrEmpty(hair))
                    return;

                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithHairStyleName(hair)
                );

                UpdateHairPickers();
                UpdateCMarkingsHair();
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
                ReloadPreview();
=======
                IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            };

            FacialHairPicker.OnSlotAdd += delegate()
            {
                if (Profile is null)
                    return;

                var hair = _markingManager.MarkingsByCategoryAndSpecies(MarkingCategories.FacialHair, Profile.Species).Keys
                    .FirstOrDefault();

                if (string.IsNullOrEmpty(hair))
                    return;

                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithFacialHairStyleName(hair)
                );

                UpdateHairPickers();
                UpdateCMarkingsFacialHair();
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
                ReloadPreview();
=======
                IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            };

            #endregion Hair

            #region Clothing

            _clothingButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-jumpsuit"), (int) ClothingPreference.Jumpsuit);
            _clothingButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-jumpskirt"), (int) ClothingPreference.Jumpskirt);

            _clothingButton.OnItemSelected += args =>
            {
                _clothingButton.SelectId(args.Id);
                SetClothing((ClothingPreference) args.Id);
            };

            #endregion Clothing

            #region Backpack

            _backpackButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-backpack"), (int) BackpackPreference.Backpack);
            _backpackButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-satchel"), (int) BackpackPreference.Satchel);
            _backpackButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-duffelbag"), (int) BackpackPreference.Duffelbag);

            _backpackButton.OnItemSelected += args =>
            {
                _backpackButton.SelectId(args.Id);
                SetBackpack((BackpackPreference) args.Id);
            };

            #endregion Backpack


            #region SpawnPriority

            foreach (var value in Enum.GetValues<SpawnPriorityPreference>())
            {
                SpawnPriorityButton.AddItem(Loc.GetString($"humanoid-profile-editor-preference-spawn-priority-{value.ToString().ToLower()}"), (int) value);
            }

            SpawnPriorityButton.OnItemSelected += args =>
            {
                SpawnPriorityButton.SelectId(args.Id);
                SetSpawnPriority((SpawnPriorityPreference) args.Id);
            };

            #endregion SpawnPriority

            #region Eyes

<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
            EyeColorPicker.OnEyeColorPicked += newColor =>
=======
            _sponsorManager = IoCManager.Resolve<SponsorManager>();
			
			_eyesPicker.OnEyeColorPicked += newColor =>
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            {
                if (Profile is null)
                return;
				if (_playerManager.LocalPlayer is null)
					return;
				if (!_sponsorManager.AllowSponsor(_playerManager.LocalPlayer?.Session)) {
					Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithSpeakerColor(newColor));
					CMarkings.CurrentSpeakerColor = Profile.Appearance.EyeColor;
				}
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithEyeColor(newColor));
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
                Markings.CurrentEyeColor = Profile.Appearance.EyeColor;
                ReloadProfilePreview();
=======
                CMarkings.CurrentEyeColor = Profile.Appearance.EyeColor;
                IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            };

            #endregion Eyes
			
			#region SpeakerColor
			
            _sponsorManager = IoCManager.Resolve<SponsorManager>();
			
            _speakerPicker.OnSpeakerColorPicked += newColor =>
            {
                if (Profile is null)
                    return;
				if (_playerManager.LocalPlayer is null)
					return;
				if (!_sponsorManager.AllowSponsor(_playerManager.LocalPlayer?.Session)) {
					newColor = Profile.Appearance.EyeColor;
				}
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithSpeakerColor(newColor));
                CMarkings.CurrentSpeakerColor = Profile.Appearance.SpeakerColor;
                IsDirty = true;
            };

            #endregion SpeakerColor

            #endregion Appearance

            #region Jobs

            TabContainer.SetTabTitle(1, Loc.GetString("humanoid-profile-editor-jobs-tab"));

            PreferenceUnavailableButton.AddItem(
                Loc.GetString("humanoid-profile-editor-preference-unavailable-stay-in-lobby-button"),
                (int) PreferenceUnavailableMode.StayInLobby);
            PreferenceUnavailableButton.AddItem(
                Loc.GetString("humanoid-profile-editor-preference-unavailable-spawn-as-overflow-button",
                              ("overflowJob", Loc.GetString(SharedGameTicker.FallbackOverflowJobName))),
                (int) PreferenceUnavailableMode.SpawnAsOverflow);

            PreferenceUnavailableButton.OnItemSelected += args =>
            {
                PreferenceUnavailableButton.SelectId(args.Id);
                Profile = Profile?.WithPreferenceUnavailable((PreferenceUnavailableMode) args.Id);
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
=======
                IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            };

            _jobCategories = new Dictionary<string, BoxContainer>();
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs

            RefreshAntags();
            RefreshJobs();

            #endregion Jobs

            TabContainer.SetTabTitle(2, Loc.GetString("humanoid-profile-editor-antags-tab"));

            RefreshTraits();
=======
            _requirements = IoCManager.Resolve<JobRequirementsManager>();
            _requirements.Updated += UpdateRoleRequirements;
            UpdateRoleRequirements();

            #endregion Jobs

            #region Antags

            _tabContainer.SetTabTitle(2, Loc.GetString("humanoid-profile-editor-antags-tab"));

            _antagPreferences = new List<AntagPreferenceSelector>();

            foreach (var antag in prototypeManager.EnumeratePrototypes<AntagPrototype>().OrderBy(a => Loc.GetString(a.Name)))
            {
                if (!antag.SetPreference)
                    continue;

                var selector = new AntagPreferenceSelector(antag);
                _antagList.AddChild(selector);
                _antagPreferences.Add(selector);
                if (selector.Disabled)
                {
                    Profile = Profile?.WithAntagPreference(antag.ID, false);
                    IsDirty = true;
                }

                selector.PreferenceChanged += preference =>
                {
                    Profile = Profile?.WithAntagPreference(antag.ID, preference);
                    IsDirty = true;
                };
            }

            #endregion Antags

            #region Traits

            var traits = prototypeManager.EnumeratePrototypes<TraitPrototype>().OrderBy(t => Loc.GetString(t.Name)).ToList();
            _traitPreferences = new List<TraitPreferenceSelector>();
            _tabContainer.SetTabTitle(3, Loc.GetString("humanoid-profile-editor-traits-tab"));

            if (traits.Count > 0)
            {
                foreach (var trait in traits)
                {
                    var selector = new TraitPreferenceSelector(trait);
                    _traitsList.AddChild(selector);
                    _traitPreferences.Add(selector);

                    selector.PreferenceChanged += preference =>
                    {
                        Profile = Profile?.WithTraitPreference(trait.ID, preference);
                        IsDirty = true;
                    };
                }
            }
            else
            {
                _traitsList.AddChild(new Label
                {
                    Text = "No traits available :(",
                    FontColorOverride = Color.Gray,
                });
            }

            #endregion

            #region Save

            _saveButton.OnPressed += _ => { Save(); };

            #endregion Save
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs

            #region Markings

            TabContainer.SetTabTitle(4, Loc.GetString("humanoid-profile-editor-markings-tab"));

            Markings.OnMarkingAdded += OnMarkingChange;
            Markings.OnMarkingRemoved += OnMarkingChange;
            Markings.OnMarkingColorChange += OnMarkingChange;
            Markings.OnMarkingRankChange += OnMarkingChange;

            #endregion Markings
			
			#region Loadouts
			
			_sponsorManager = IoCManager.Resolve<SponsorManager>();	
			
            _loadoutPoints.MaxValue = !(Profile is null) && !(_playerManager.LocalPlayer is null) &&
				_sponsorManager.AllowSponsor(_playerManager.LocalPlayer?.Session)
				? SponsorStartLoadoutPoints : BaseStartLoadoutPoints;
            _tabContainer.SetTabTitle(5, Loc.GetString("humanoid-profile-editor-loadouts-tab"));
            _loadoutPreferences = new List<LoadoutPreferenceSelector>();
            var loadouts = prototypeManager.EnumeratePrototypes<LoadoutPrototype>().OrderBy(l => l.ID).ToList();

            if (loadouts.Count >= 0)
            {
                // Make Uncategorized category
                var bocks = new BoxContainer()
                {
                    Orientation = LayoutOrientation.Vertical,
                    VerticalExpand = true,
                    Name = "Uncategorized_0"
                };

                _loadoutsTabs.AddChild(bocks);
                _loadoutsTabs.SetTabTitle(0, "loadout-category-uncategorized");

                // Make categories
                int currentCategory = 1;
                foreach (var loadout in loadouts)
                {
                    // Check for an existing category
                    BoxContainer? match = null;
                    foreach (var child in _loadoutsTabs.Children)
                    {
                        if (match != null || child.Name == null) continue;
                        if (child.Name.Split("_")[0] == loadout.Category)
                            match = (BoxContainer) child;
                    }

                    // If there is a category do nothing
                    if (match != null)
                        continue;
                    // If not, make it
                    var box = new BoxContainer()
                    {
                        Orientation = LayoutOrientation.Vertical,
                        VerticalExpand = true,
                        Name = $"{loadout.Category}_{currentCategory}"
                    };

                    _loadoutsTabs.AddChild(box);
                    _loadoutsTabs.SetTabTitle(currentCategory, Loc.GetString(loadout.Category));
                    currentCategory++;
                }

                _loadoutsTabs.CurrentTab = 1;

                // Fill categories
                var _entman = IoCManager.Resolve<IEntityManager>();
                foreach (var loadout in loadouts.OrderBy(l => (
				Loc.GetString(_entman.GetComponent<MetaDataComponent>(_entman.SpawnEntity(l.Prototype, MapCoordinates.Nullspace)).EntityName)
				)))
                {
                    var selector = new LoadoutPreferenceSelector(loadout);

                    // Look for an existing loadout category
                    BoxContainer? match = null;
                    foreach (var child in _loadoutsTabs.Children)
                    {
                        if (match != null || child.Name == null)
                            continue;
                        if (child.Name.Split("_")[0] == loadout.Category)
                            match = (BoxContainer) child;
                    }
                    if (match?.Name == null)
                    {
                        _loadoutsTabs.SetTabTitle(0, "loadout-category-uncategorized");
                        bocks.AddChild(selector);
                    }
                    else
                    {
                        _loadoutsTabs.SetTabTitle(int.Parse(match.Name.Split("_")[1]), Loc.GetString(loadout.Category));
                        match.AddChild(selector);
                    }

                    _loadoutPreferences.Add(selector);
                    selector.PreferenceChanged += preference =>
                    {
					
                        // Make sure they have enough loadout points
                        if (preference)
                        {
                            
							var remain = _loadoutPoints.Value - loadout.Cost;
                            if (remain < 0)
                                preference = false;
                            else if (loadout.SponsorOnly && !_sponsorManager.AllowSponsor(_playerManager.LocalPlayer?.Session))
								preference = false;
							else
                                _loadoutPoints.Value = remain;
                        }
                        else
                            _loadoutPoints.Value += loadout.Cost;
                        // Update Preference
                        Profile = Profile?.WithLoadoutPreference(loadout.ID, preference);
                        IsDirty = true;
                        UpdateLoadoutPreferences();
                        RebuildSpriteView();
                    };
                }

                if (!bocks.Children.Any())
                {
                    _loadoutsTabs.SetTabVisible(0, false);
                }
            }
            else
            {
                _loadoutsTab.AddChild(new Label { Text="No loadouts found" });
            }

            #endregion

<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
            RefreshFlavorText();
=======
            #region FlavorText

            if (_configurationManager.GetCVar(CCVars.FlavorText))
            {
                var flavorText = new FlavorText.FlavorText();
                _tabContainer.AddChild(flavorText);
                _tabContainer.SetTabTitle(_tabContainer.ChildCount - 1, Loc.GetString("humanoid-profile-editor-flavortext-tab"));
                _flavorTextEdit = flavorText.CFlavorTextInput;

                flavorText.OnFlavorTextChanged += OnFlavorTextChange;
            }

            #endregion FlavorText
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs

            #region Dummy

            SpriteRotateLeft.OnPressed += _ =>
            {
                _previewRotation = _previewRotation.TurnCw();
                _needUpdatePreview = true;
            };
            SpriteRotateRight.OnPressed += _ =>
            {
                _previewRotation = _previewRotation.TurnCcw();
                _needUpdatePreview = true;
            };

            var species = Profile?.Species ?? SharedHumanoidAppearanceSystem.DefaultSpecies;
            var dollProto = _prototypeManager.Index<SpeciesPrototype>(species).DollPrototype;

            if (_previewDummy != null)
                _entMan.DeleteEntity(_previewDummy!.Value);

            _previewDummy = _entMan.SpawnEntity(dollProto, MapCoordinates.Nullspace);
            _previewSpriteView.SetEntity(_previewDummy);
            #endregion Dummy

            #endregion Left

<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
            ShowClothes.OnToggled += args =>
            {
                ReloadPreview();
            };
=======
            if (preferencesManager.ServerDataLoaded)
            {
                LoadServerData();
            }

            preferencesManager.OnServerDataLoaded += LoadServerData;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs

            SpeciesInfoButton.OnPressed += OnSpeciesInfoButtonPressed;

            UpdateSpeciesGuidebookIcon();
            ReloadPreview();
            IsDirty = false;
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
        }

        /// <summary>
        /// Refreshes the flavor text editor status.
        /// </summary>
        public void RefreshFlavorText()
        {
            if (_cfgManager.GetCVar(CCVars.FlavorText))
            {
                if (_flavorText != null)
                    return;

                _flavorText = new FlavorText.FlavorText();
                TabContainer.AddChild(_flavorText);
                TabContainer.SetTabTitle(TabContainer.ChildCount - 1, Loc.GetString("humanoid-profile-editor-flavortext-tab"));
                _flavorTextEdit = _flavorText.CFlavorTextInput;

                _flavorText.OnFlavorTextChanged += OnFlavorTextChange;
            }
            else
            {
                if (_flavorText == null)
                    return;

                TabContainer.RemoveChild(_flavorText);
                _flavorText.OnFlavorTextChanged -= OnFlavorTextChange;
                _flavorText.Dispose();
                _flavorTextEdit?.Dispose();
                _flavorTextEdit = null;
                _flavorText = null;
            }
        }

        /// <summary>
        /// Refreshes traits selector
        /// </summary>
        public void RefreshTraits()
        {
            TraitsList.DisposeAllChildren();

            var traits = _prototypeManager.EnumeratePrototypes<TraitPrototype>().OrderBy(t => Loc.GetString(t.Name)).ToList();
            TabContainer.SetTabTitle(3, Loc.GetString("humanoid-profile-editor-traits-tab"));

            if (traits.Count > 0)
            {
                foreach (var trait in traits)
                {
                    var selector = new TraitPreferenceSelector(trait);

                    if (Profile?.TraitPreferences.Contains(trait.ID) == true)
                    {
                        selector.Preference = true;
                    }
                    else
                    {
                        selector.Preference = false;
                    }

                    selector.PreferenceChanged += preference =>
                    {
                        Profile = Profile?.WithTraitPreference(trait.ID, preference);
                        SetDirty();
                    };

                    TraitsList.AddChild(selector);
                }
            }
            else
            {
                TraitsList.AddChild(new Label
                {
                    // TODO: Localise
                    Text = "No traits available :(",
                    FontColorOverride = Color.Gray,
                });
            }
        }

        /// <summary>
        /// Refreshes the species selector.
        /// </summary>
        public void RefreshSpecies()
        {
            SpeciesButton.Clear();
            _species.Clear();

            _species.AddRange(_prototypeManager.EnumeratePrototypes<SpeciesPrototype>().Where(o => o.RoundStart));
            var speciesIds = _species.Select(o => o.ID).ToList();

            for (var i = 0; i < _species.Count; i++)
            {
                var name = Loc.GetString(_species[i].Name);
                SpeciesButton.AddItem(name, i);

                if (Profile?.Species.Equals(_species[i].ID) == true)
                {
                    SpeciesButton.SelectId(i);
                }
            }

            // If our species isn't available then reset it to default.
            if (Profile != null)
            {
                if (!speciesIds.Contains(Profile.Species))
                {
                    SetSpecies(SharedHumanoidAppearanceSystem.DefaultSpecies);
                }
            }
        }

        public void RefreshAntags()
        {
            AntagList.DisposeAllChildren();
            var items = new[]
            {
                ("humanoid-profile-editor-antag-preference-yes-button", 0),
                ("humanoid-profile-editor-antag-preference-no-button", 1)
            };

            foreach (var antag in _prototypeManager.EnumeratePrototypes<AntagPrototype>().OrderBy(a => Loc.GetString(a.Name)))
            {
                if (!antag.SetPreference)
                    continue;

                var antagContainer = new BoxContainer()
                {
                    Orientation = LayoutOrientation.Horizontal,
                };

                var selector = new RequirementsSelector()
                {
                    Margin = new Thickness(3f, 3f, 3f, 0f),
                };

                var title = Loc.GetString(antag.Name);
                var description = Loc.GetString(antag.Objective);
                selector.Setup(items, title, 250, description);
                selector.Select(Profile?.AntagPreferences.Contains(antag.ID) == true ? 0 : 1);

                if (!_requirements.CheckRoleTime(antag.Requirements, out var reason))
                {
                    selector.LockRequirements(reason);
                    Profile = Profile?.WithAntagPreference(antag.ID, false);
                    SetDirty();
                }
                else
                {
                    selector.UnlockRequirements();
                }

                selector.OnSelected += preference =>
                {
                    Profile = Profile?.WithAntagPreference(antag.ID, preference == 0);
                    SetDirty();
                };

                antagContainer.AddChild(selector);

                antagContainer.AddChild(new Button()
                {
                    Disabled = true,
                    Text = Loc.GetString("loadout-window"),
                    HorizontalAlignment = HAlignment.Right,
                    Margin = new Thickness(3f, 0f, 0f, 0f),
                });

                AntagList.AddChild(antagContainer);
            }
        }

        private void SetDirty()
        {
            // If it equals default then reset the button.
            if (Profile == null || _preferencesManager.Preferences?.SelectedCharacter.MemberwiseEquals(Profile) == true)
            {
                IsDirty = false;
                return;
            }

            // TODO: Check if profile matches default.
            IsDirty = true;
=======
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
        }

        /// <summary>
        /// Refresh all loadouts.
        /// </summary>
        public void RefreshLoadouts()
        {
            _loadoutWindow?.Dispose();
        }

        /// <summary>
        /// Reloads the entire dummy entity for preview.
        /// </summary>
        /// <remarks>
        /// This is expensive so not recommended to run if you have a slider.
        /// </remarks>
        private void ReloadPreview()
        {
            _entManager.DeleteEntity(PreviewDummy);
            PreviewDummy = EntityUid.Invalid;

            if (Profile == null || !_prototypeManager.HasIndex<SpeciesPrototype>(Profile.Species))
                return;

            PreviewDummy = _controller.LoadProfileEntity(Profile, JobOverride, ShowClothes.Pressed);
            SpriteView.SetEntity(PreviewDummy);
        }

        /// <summary>
        /// Resets the profile to the defaults.
        /// </summary>
        public void ResetToDefault()
        {
            SetProfile(
                (HumanoidCharacterProfile?) _preferencesManager.Preferences?.SelectedCharacter,
                _preferencesManager.Preferences?.SelectedCharacterIndex);
        }

        /// <summary>
        /// Sets the editor to the specified profile with the specified slot.
        /// </summary>
        public void SetProfile(HumanoidCharacterProfile? profile, int? slot)
        {
            Profile = profile?.Clone();
            CharacterSlot = slot;
            IsDirty = false;
            JobOverride = null;

            UpdateNameEdit();
            UpdateFlavorTextEdit();
            UpdateSexControls();
            UpdateGenderControls();
            UpdateSkinColor();
            UpdateSpawnPriorityControls();
            UpdateAgeEdit();
            UpdateEyePickers();
            UpdateSaveButton();
            UpdateMarkings();
            UpdateHairPickers();
            UpdateCMarkingsHair();
            UpdateCMarkingsFacialHair();

            RefreshAntags();
            RefreshJobs();
            RefreshLoadouts();
            RefreshSpecies();
            RefreshTraits();
            RefreshFlavorText();
            ReloadPreview();

            if (Profile != null)
            {
                PreferenceUnavailableButton.SelectId((int) Profile.PreferenceUnavailable);
            }
        }


        /// <summary>
        /// A slim reload that only updates the entity itself and not any of the job entities, etc.
        /// </summary>
        private void ReloadProfilePreview()
        {
            if (Profile == null || !_entManager.EntityExists(PreviewDummy))
                return;

            _entManager.System<HumanoidAppearanceSystem>().LoadProfile(PreviewDummy, Profile);
        }

        private void OnSpeciesInfoButtonPressed(BaseButton.ButtonEventArgs args)
        {
            var guidebookController = UserInterfaceManager.GetUIController<GuidebookUIController>();
            var species = Profile?.Species ?? SharedHumanoidAppearanceSystem.DefaultSpecies;
            var page = "Species";
            if (_prototypeManager.HasIndex<GuideEntryPrototype>(species))
                page = species;

            if (_prototypeManager.TryIndex<GuideEntryPrototype>("Species", out var guideRoot))
            {
                var dict = new Dictionary<string, GuideEntry>();
                dict.Add("Species", guideRoot);
                //TODO: Don't close the guidebook if its already open, just go to the correct page
                guidebookController.ToggleGuidebook(dict, includeChildren:true, selected: page);
            }
        }

<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
        /// <summary>
        /// Refreshes all job selectors.
        /// </summary>
        public void RefreshJobs()
        {
            JobList.DisposeAllChildren();
=======

        private void ToggleClothes(BaseButton.ButtonEventArgs obj)
        {
            RebuildSpriteView();
        }

        private void ToggleLoadout(BaseButton.ButtonEventArgs obj)
        {
            RebuildSpriteView();
        }

        private void UpdateRoleRequirements()
        {
            _jobList.DisposeAllChildren();
            _jobPriorities.Clear();
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            _jobCategories.Clear();
            _jobPriorities.Clear();
            var firstCategory = true;

<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
            var departments = _prototypeManager.EnumeratePrototypes<DepartmentPrototype>().ToArray();
            Array.Sort(departments, DepartmentUIComparer.Instance);

            var items = new[]
            {
                ("humanoid-profile-editor-job-priority-never-button", (int) JobPriority.Never),
                ("humanoid-profile-editor-job-priority-low-button", (int) JobPriority.Low),
                ("humanoid-profile-editor-job-priority-medium-button", (int) JobPriority.Medium),
                ("humanoid-profile-editor-job-priority-high-button", (int) JobPriority.High),
            };

            foreach (var department in departments)
=======
            foreach (var department in _prototypeManager.EnumeratePrototypes<DepartmentPrototype>())
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            {
                var departmentName = Loc.GetString($"department-{department.ID}");

                if (!_jobCategories.TryGetValue(department.ID, out var category))
                {
                    category = new BoxContainer
                    {
                        Orientation = LayoutOrientation.Vertical,
                        Name = department.ID,
                        ToolTip = Loc.GetString("humanoid-profile-editor-jobs-amount-in-department-tooltip",
                            ("departmentName", departmentName))
                    };

                    if (firstCategory)
                    {
                        firstCategory = false;
                    }
                    else
                    {
                        category.AddChild(new Control
                        {
                            MinSize = new Vector2(0, 23),
                        });
                    }

                    category.AddChild(new PanelContainer
                    {
                        PanelOverride = new StyleBoxFlat {BackgroundColor = Color.FromHex("#464966")},
                        Children =
                        {
                            new Label
                            {
                                Text = Loc.GetString("humanoid-profile-editor-department-jobs-label",
                                    ("departmentName", departmentName)),
                                Margin = new Thickness(5f, 0, 0, 0)
                            }
                        }
                    });

                    _jobCategories[department.ID] = category;
                    JobList.AddChild(category);
                }

<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
                var jobs = department.Roles.Select(jobId => _prototypeManager.Index<JobPrototype>(jobId))
                    .Where(job => job.SetPreference)
                    .ToArray();

                Array.Sort(jobs, JobUIComparer.Instance);

                foreach (var job in jobs)
                {
                    var jobContainer = new BoxContainer()
                    {
                        Orientation = LayoutOrientation.Horizontal,
                    };

                    var selector = new RequirementsSelector()
                    {
                        Margin = new Thickness(3f, 3f, 3f, 0f),
                    };
=======
                var jobs = department.Roles.Select(o => _prototypeManager.Index<JobPrototype>(o)).Where(o => o.SetPreference).ToList();
                jobs.Sort((x, y) => -string.Compare(x.LocalizedName, y.LocalizedName, StringComparison.CurrentCultureIgnoreCase));

                foreach (var job in jobs)
                {
                    var selector = new JobPrioritySelector(job, _prototypeManager);
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs

                    var icon = new TextureRect
                    {
                        TextureScale = new Vector2(2, 2),
                        VerticalAlignment = VAlignment.Center
                    };
                    var jobIcon = _prototypeManager.Index<StatusIconPrototype>(job.Icon);
                    icon.Texture = jobIcon.Icon.Frame0();
                    selector.Setup(items, job.LocalizedName, 200, job.LocalizedDescription, icon);

                    if (!_requirements.IsAllowed(job, out var reason))
                    {
                        selector.LockRequirements(reason);
                    }
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
                    else
                    {
                        selector.UnlockRequirements();
                    }

                    selector.OnSelected += selectedPrio =>
                    {
                        var selectedJobPrio = (JobPriority) selectedPrio;
                        Profile = Profile?.WithJobPriority(job.ID, selectedJobPrio);
=======

                    category.AddChild(selector);
                    _jobPriorities.Add(selector);

                    selector.PriorityChanged += priority =>
                    {
                        Profile = Profile?.WithJobPriority(job.ID, priority);
                        IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs

                        foreach (var (jobId, other) in _jobPriorities)
                        {
                            // Sync other selectors with the same job in case of multiple department jobs
                            if (jobId == job.ID)
                            {
                                other.Select(selectedPrio);
                            }
                            else if (selectedJobPrio == JobPriority.High && (JobPriority) other.Selected == JobPriority.High)
                            {
                                // Lower any other high priorities to medium.
                                other.Select((int) JobPriority.Medium);
                                Profile = Profile?.WithJobPriority(jobId, JobPriority.Medium);
                            }
                        }
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs

                        // TODO: Only reload on high change (either to or from).
                        ReloadPreview();

                        UpdateJobPriorities();
                        SetDirty();
=======
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
                    };

                    var loadoutWindowBtn = new Button()
                    {
                        Text = Loc.GetString("loadout-window"),
                        HorizontalAlignment = HAlignment.Right,
                        VerticalAlignment = VAlignment.Center,
                        Margin = new Thickness(3f, 3f, 0f, 0f),
                    };

                    var collection = IoCManager.Instance!;
                    var protoManager = collection.Resolve<IPrototypeManager>();

                    // If no loadout found then disabled button
                    if (!protoManager.TryIndex<RoleLoadoutPrototype>(LoadoutSystem.GetJobPrototype(job.ID), out var roleLoadoutProto))
                    {
                        loadoutWindowBtn.Disabled = true;
                    }
                    // else
                    else
                    {
                        loadoutWindowBtn.OnPressed += args =>
                        {
                            RoleLoadout? loadout = null;

                            // Clone so we don't modify the underlying loadout.
                            Profile?.Loadouts.TryGetValue(LoadoutSystem.GetJobPrototype(job.ID), out loadout);
                            loadout = loadout?.Clone();

                            if (loadout == null)
                            {
                                loadout = new RoleLoadout(roleLoadoutProto.ID);
                                loadout.SetDefault(_prototypeManager);
                            }

                            OpenLoadout(job, loadout, roleLoadoutProto);
                        };
                    }

                    _jobPriorities.Add((job.ID, selector));
                    jobContainer.AddChild(selector);
                    jobContainer.AddChild(loadoutWindowBtn);
                    category.AddChild(jobContainer);
                }
            }
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs

            UpdateJobPriorities();
        }

        private void OpenLoadout(JobPrototype? jobProto, RoleLoadout roleLoadout, RoleLoadoutPrototype roleLoadoutProto)
        {
            _loadoutWindow?.Dispose();
            _loadoutWindow = null;
            var collection = IoCManager.Instance;

            if (collection == null || _playerManager.LocalSession == null || Profile == null)
                return;

            JobOverride = jobProto;
            var session = _playerManager.LocalSession;

            _loadoutWindow = new LoadoutWindow(Profile, roleLoadout, roleLoadoutProto, _playerManager.LocalSession, collection)
            {
                Title = jobProto?.ID + "-loadout",
            };

            // Refresh the buttons etc.
            _loadoutWindow.RefreshLoadouts(roleLoadout, session, collection);
            _loadoutWindow.OpenCenteredLeft();

            _loadoutWindow.OnLoadoutPressed += (loadoutGroup, loadoutProto) =>
            {
                roleLoadout.AddLoadout(loadoutGroup, loadoutProto, _prototypeManager);
                _loadoutWindow.RefreshLoadouts(roleLoadout, session, collection);
                Profile = Profile?.WithLoadout(roleLoadout);
                SetDirty();
                ReloadPreview();
            };

            _loadoutWindow.OnLoadoutUnpressed += (loadoutGroup, loadoutProto) =>
            {
                roleLoadout.RemoveLoadout(loadoutGroup, loadoutProto, _prototypeManager);
                _loadoutWindow.RefreshLoadouts(roleLoadout, session, collection);
                Profile = Profile?.WithLoadout(roleLoadout);
                SetDirty();
                ReloadPreview();
            };

            JobOverride = jobProto;
            ReloadPreview();

            _loadoutWindow.OnClose += () =>
            {
                JobOverride = null;
                SetDirty();
                ReloadPreview();
            };
=======
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
        }

        private void OnFlavorTextChange(string content)
        {
            if (Profile is null)
                return;

            Profile = Profile.WithFlavorText(content);
            IsDirty = true;
        }

        private void OnMarkingChange(MarkingSet markings)
        {
            if (Profile is null)
                return;

            Profile = Profile.WithCharacterAppearance(Profile.Appearance.WithMarkings(markings.GetForwardEnumerator().ToList()));
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
            SetDirty();
            ReloadProfilePreview();
=======
            _needUpdatePreview = true;
            IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
        }

        private void OnMarkingColorChange(List<Marking> markings)
        {
            if (Profile is null)
                return;

            Profile = Profile.WithCharacterAppearance(Profile.Appearance.WithMarkings(markings));
            IsDirty = true;
        }


        private void OnSkinColorOnValueChanged()
        {
            if (Profile is null) return;

            var skin = _prototypeManager.Index<SpeciesPrototype>(Profile.Species).SkinColoration;

            switch (skin)
            {
                case HumanoidSkinColor.HumanToned:
                {
                    if (!Skin.Visible)
                    {
                        Skin.Visible = true;
                        RgbSkinColorContainer.Visible = false;
                    }

                    var color = SkinColor.HumanSkinTone((int) Skin.Value);

                    Markings.CurrentSkinColor = color;
                    Profile = Profile.WithCharacterAppearance(Profile.Appearance.WithSkinColor(color));//
                    break;
                }
                case HumanoidSkinColor.Hues:
                {
                    if (!RgbSkinColorContainer.Visible)
                    {
                        Skin.Visible = false;
                        RgbSkinColorContainer.Visible = true;
                    }

                    Markings.CurrentSkinColor = _rgbSkinColorSelector.Color;
                    Profile = Profile.WithCharacterAppearance(Profile.Appearance.WithSkinColor(_rgbSkinColorSelector.Color));
                    break;
                }
                case HumanoidSkinColor.TintedHues:
                {
                    if (!RgbSkinColorContainer.Visible)
                    {
                        Skin.Visible = false;
                        RgbSkinColorContainer.Visible = true;
                    }

                    var color = SkinColor.TintedHues(_rgbSkinColorSelector.Color);

                    Markings.CurrentSkinColor = color;
                    Profile = Profile.WithCharacterAppearance(Profile.Appearance.WithSkinColor(color));
                    break;
                }
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
                case HumanoidSkinColor.VoxFeathers:
                {
                    if (!RgbSkinColorContainer.Visible)
                    {
                        Skin.Visible = false;
                        RgbSkinColorContainer.Visible = true;
                    }

                    var color = SkinColor.ClosestVoxColor(_rgbSkinColorSelector.Color);

                    Markings.CurrentSkinColor = color;
                    Profile = Profile.WithCharacterAppearance(Profile.Appearance.WithSkinColor(color));
                    break;
                }
            }

            SetDirty();
            ReloadProfilePreview();
=======
            }

            IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
            if (!disposing)
                return;

<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
            _loadoutWindow?.Dispose();
            _loadoutWindow = null;
            _entManager.DeleteEntity(PreviewDummy);
            PreviewDummy = EntityUid.Invalid;
=======
            if (_previewDummy != null)
                _entMan.DeleteEntity(_previewDummy.Value);

            _requirements.Updated -= UpdateRoleRequirements;
            _preferencesManager.OnServerDataLoaded -= LoadServerData;
        }

        private void RebuildSpriteView()
        {
            var species = Profile?.Species ?? SharedHumanoidAppearanceSystem.DefaultSpecies;
            var dollProto = _prototypeManager.Index<SpeciesPrototype>(species).DollPrototype;

            if (_previewDummy != null)
                _entMan.DeleteEntity(_previewDummy!.Value);

            _previewDummy = _entMan.SpawnEntity(dollProto, MapCoordinates.Nullspace);
            _previewSpriteView.SetEntity(_previewDummy);
            _needUpdatePreview = true;
        }

        private void LoadServerData()
        {
            Profile = (HumanoidCharacterProfile) _preferencesManager.Preferences!.SelectedCharacter;
            CharacterSlot = _preferencesManager.Preferences.SelectedCharacterIndex;

            UpdateControls();
            _needUpdatePreview = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
        }

        private void SetAge(int newAge)
        {
            Profile = Profile?.WithAge(newAge);
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
            ReloadPreview();
            SetDirty();
=======
            IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
        }

        private void SetSex(Sex newSex)
        {
            Profile = Profile?.WithSex(newSex);
            // for convenience, default to most common gender when new sex is selected
            switch (newSex)
            {
                case Sex.Male:
                    Profile = Profile?.WithGender(Gender.Male);
                    break;
                case Sex.Female:
                    Profile = Profile?.WithGender(Gender.Female);
                    break;
                default:
                    Profile = Profile?.WithGender(Gender.Epicene);
                    break;
            }

            UpdateGenderControls();
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
            Markings.SetSex(newSex);
            ReloadPreview();
            SetDirty();
=======
            CMarkings.SetSex(newSex);
            IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
        }

        private void SetGender(Gender newGender)
        {
            Profile = Profile?.WithGender(newGender);
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
            ReloadPreview();
            SetDirty();
=======
            IsDirty = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
        }

        private void SetSpecies(string newSpecies)
        {
            Profile = Profile?.WithSpecies(newSpecies);
            OnSkinColorOnValueChanged(); // Species may have special color prefs, make sure to update it.
            Markings.SetSpecies(newSpecies); // Repopulate the markings tab as well.
            // In case there's job restrictions for the species
            RefreshJobs();
            // In case there's species restrictions for loadouts
            RefreshLoadouts();
            UpdateSexControls(); // update sex for new species
            RebuildSpriteView(); // they might have different inv so we need a new dummy
            UpdateSpeciesGuidebookIcon();
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
            SetDirty();
            ReloadPreview();
=======
            IsDirty = true;
            _needUpdatePreview = true;
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
        }

        private void SetName(string newName)
        {
            Profile = Profile?.WithName(newName);
            IsDirty = true;
        }

        private void SetClothing(ClothingPreference newClothing)
        {
            Profile = Profile?.WithClothingPreference(newClothing);
            IsDirty = true;
        }

        private void SetBackpack(BackpackPreference newBackpack)
        {
            Profile = Profile?.WithBackpackPreference(newBackpack);
            IsDirty = true;
        }

        private void SetSpawnPriority(SpawnPriorityPreference newSpawnPriority)
        {
            Profile = Profile?.WithSpawnPriorityPreference(newSpawnPriority);
            IsDirty = true;
        }

<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
=======
        public void Save()
        {
            IsDirty = false;

            if (Profile != null)
            {
                _preferencesManager.UpdateCharacter(Profile, CharacterSlot);
                OnProfileChanged?.Invoke(Profile, CharacterSlot);
                _needUpdatePreview = true;
            }
        }

>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
        private bool IsDirty
        {
            get => _isDirty;
            set
            {
                if (_isDirty == value)
                    return;

                _isDirty = value;
                _needUpdatePreview = true;
                UpdateSaveButton();
            }
        }

        private void UpdateNameEdit()
        {
            NameEdit.Text = Profile?.Name ?? "";
        }

        private void UpdateFlavorTextEdit()
        {
            if (_flavorTextEdit != null)
            {
                _flavorTextEdit.TextRope = new Rope.Leaf(Profile?.FlavorText ?? "");
            }
        }

        private void UpdateAgeEdit()
        {
            AgeEdit.Text = Profile?.Age.ToString() ?? "";
        }

        /// <summary>
        /// Updates selected job priorities to the profile's.
        /// </summary>
        private void UpdateJobPriorities()
        {
            foreach (var (jobId, prioritySelector) in _jobPriorities)
            {
                var priority = Profile?.JobPriorities.GetValueOrDefault(jobId, JobPriority.Never) ?? JobPriority.Never;
                prioritySelector.Select((int) priority);
            }
        }

        private void UpdateSexControls()
        {
            if (Profile == null)
                return;

            SexButton.Clear();

            var sexes = new List<Sex>();

            // add species sex options, default to just none if we are in bizzaro world and have no species
            if (_prototypeManager.TryIndex<SpeciesPrototype>(Profile.Species, out var speciesProto))
            {
                foreach (var sex in speciesProto.Sexes)
                {
                    sexes.Add(sex);
                }
            }
            else
            {
                sexes.Add(Sex.Unsexed);
            }

            // add button for each sex
            foreach (var sex in sexes)
            {
                SexButton.AddItem(Loc.GetString($"humanoid-profile-editor-sex-{sex.ToString().ToLower()}-text"), (int) sex);
            }

            if (sexes.Contains(Profile.Sex))
                SexButton.SelectId((int) Profile.Sex);
            else
                SexButton.SelectId((int) sexes[0]);
        }

        private void UpdateSkinColor()
        {
            if (Profile == null)
                return;

            var skin = _prototypeManager.Index<SpeciesPrototype>(Profile.Species).SkinColoration;

            switch (skin)
            {
                case HumanoidSkinColor.HumanToned:
                {
                    if (!Skin.Visible)
                    {
                        Skin.Visible = true;
                        RgbSkinColorContainer.Visible = false;
                    }

                    Skin.Value = SkinColor.HumanSkinToneFromColor(Profile.Appearance.SkinColor);

                    break;
                }
                case HumanoidSkinColor.Hues:
                {
                    if (!RgbSkinColorContainer.Visible)
                    {
                        Skin.Visible = false;
                        RgbSkinColorContainer.Visible = true;
                    }

                    // set the RGB values to the direct values otherwise
                    _rgbSkinColorSelector.Color = Profile.Appearance.SkinColor;
                    break;
                }
                case HumanoidSkinColor.TintedHues:
                {
                    if (!RgbSkinColorContainer.Visible)
                    {
                        Skin.Visible = false;
                        RgbSkinColorContainer.Visible = true;
                    }

                    // set the RGB values to the direct values otherwise
                    _rgbSkinColorSelector.Color = Profile.Appearance.SkinColor;
                    break;
                }
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
                case HumanoidSkinColor.VoxFeathers:
                {
                    if (!RgbSkinColorContainer.Visible)
                    {
                        Skin.Visible = false;
                        RgbSkinColorContainer.Visible = true;
                    }

                    _rgbSkinColorSelector.Color = SkinColor.ClosestVoxColor(Profile.Appearance.SkinColor);

                    break;
                }
=======
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            }

        }

        public void UpdateSpeciesGuidebookIcon()
        {
            SpeciesInfoButton.StyleClasses.Clear();

            var species = Profile?.Species;
            if (species is null)
                return;

            if (!_prototypeManager.TryIndex<SpeciesPrototype>(species, out var speciesProto))
                return;

            // Don't display the info button if no guide entry is found
            if (!_prototypeManager.HasIndex<GuideEntryPrototype>(species))
                return;

            var style = speciesProto.GuideBookIcon;
            SpeciesInfoButton.StyleClasses.Add(style);
        }



        private void UpdateMarkings()
        {
            if (Profile == null)
            {
                return;
            }

<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
            Markings.SetData(Profile.Appearance.Markings, Profile.Species,
                Profile.Sex, Profile.Appearance.SkinColor, Profile.Appearance.EyeColor
=======
            CMarkings.SetData(Profile.Appearance.Markings, Profile.Species,
                Profile.Sex, Profile.Appearance.SkinColor, Profile.Appearance.EyeColor, Profile.Appearance.SpeakerColor
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            );
        }

        private void UpdateGenderControls()
        {
            if (Profile == null)
            {
                return;
            }

            PronounsButton.SelectId((int) Profile.Gender);
        }

        private void UpdateClothingControls()
        {
            if (Profile == null)
            {
                return;
            }

            _clothingButton.SelectId((int) Profile.Clothing);
        }

        private void UpdateBackpackControls()
        {
            if (Profile == null)
            {
                return;
            }

            _backpackButton.SelectId((int) Profile.Backpack);
        }

        private void UpdateSpawnPriorityControls()
        {
            if (Profile == null)
            {
                return;
            }

            SpawnPriorityButton.SelectId((int) Profile.SpawnPriority);
        }


        private void UpdateHairPickers()
        {
            if (Profile == null)
            {
                return;
            }
            var hairMarking = Profile.Appearance.HairStyleId switch
            {
                HairStyles.DefaultHairStyle => new List<Marking>(),
                _ => new() { new(Profile.Appearance.HairStyleId, new List<Color>() { Profile.Appearance.HairColor }) },
            };

            var facialHairMarking = Profile.Appearance.FacialHairStyleId switch
            {
                HairStyles.DefaultFacialHairStyle => new List<Marking>(),
                _ => new() { new(Profile.Appearance.FacialHairStyleId, new List<Color>() { Profile.Appearance.FacialHairColor }) },
            };

            HairStylePicker.UpdateData(
                hairMarking,
                Profile.Species,
                1);
            FacialHairPicker.UpdateData(
                facialHairMarking,
                Profile.Species,
                1);
        }

        private void UpdateCMarkingsHair()
        {
            if (Profile == null)
            {
                return;
            }

            // hair color
            Color? hairColor = null;
            if ( Profile.Appearance.HairStyleId != HairStyles.DefaultHairStyle &&
                _markingManager.Markings.TryGetValue(Profile.Appearance.HairStyleId, out var hairProto)
            )
            {
                if (_markingManager.CanBeApplied(Profile.Species, Profile.Sex, hairProto, _prototypeManager))
                {
                    if (_markingManager.MustMatchSkin(Profile.Species, HumanoidVisualLayers.Hair, out var _, _prototypeManager))
                    {
                        hairColor = Profile.Appearance.SkinColor;
                    }
                    else
                    {
                        hairColor = Profile.Appearance.HairColor;
                    }
                }
            }
            if (hairColor != null)
            {
                Markings.HairMarking = new (Profile.Appearance.HairStyleId, new List<Color>() { hairColor.Value });
            }
            else
            {
                Markings.HairMarking = null;
            }
        }

        private void UpdateCMarkingsFacialHair()
        {
            if (Profile == null)
            {
                return;
            }

            // facial hair color
            Color? facialHairColor = null;
            if ( Profile.Appearance.FacialHairStyleId != HairStyles.DefaultFacialHairStyle &&
                _markingManager.Markings.TryGetValue(Profile.Appearance.FacialHairStyleId, out var facialHairProto))
            {
                if (_markingManager.CanBeApplied(Profile.Species, Profile.Sex, facialHairProto, _prototypeManager))
                {
                    if (_markingManager.MustMatchSkin(Profile.Species, HumanoidVisualLayers.Hair, out var _, _prototypeManager))
                    {
                        facialHairColor = Profile.Appearance.SkinColor;
                    }
                    else
                    {
                        facialHairColor = Profile.Appearance.FacialHairColor;
                    }
                }
            }
            if (facialHairColor != null)
            {
                Markings.FacialHairMarking = new (Profile.Appearance.FacialHairStyleId, new List<Color>() { facialHairColor.Value });
            }
            else
            {
                Markings.FacialHairMarking = null;
            }
        }

        private void UpdateEyePickers()
        {
            if (Profile is null)
                return;
			if (_playerManager.LocalPlayer is null)
				return;
			if (!_sponsorManager.AllowSponsor(_playerManager.LocalPlayer?.Session)) {
				CMarkings.CurrentSpeakerColor = Profile.Appearance.EyeColor;
				_speakerPicker.SetData(Profile.Appearance.EyeColor);
			}

            Markings.CurrentEyeColor = Profile.Appearance.EyeColor;
            EyeColorPicker.SetData(Profile.Appearance.EyeColor);
        }
		
		private void UpdateSpeakerPickers()
        {
            if (Profile is null)
                return;
			if (_playerManager.LocalPlayer is null)
				return;
			if (!_sponsorManager.AllowSponsor(_playerManager.LocalPlayer?.Session)) {
				CMarkings.CurrentSpeakerColor = Profile.Appearance.EyeColor;
				_speakerPicker.SetData(Profile.Appearance.EyeColor);
				return;
			}

            CMarkings.CurrentSpeakerColor = Profile.Appearance.SpeakerColor;
            _speakerPicker.SetData(Profile.Appearance.SpeakerColor);
        }

        private void UpdateSaveButton()
        {
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
            SaveButton.Disabled = Profile is null || !IsDirty;
            ResetButton.Disabled = Profile is null || !IsDirty;
        }

        private void SetPreviewRotation(Direction direction)
        {
            SpriteView.OverrideDirection = (Direction) ((int) direction % 4 * 2);
=======
            _saveButton.Disabled = Profile is null || !IsDirty;
        }

        private void UpdatePreview()
        {
            if (Profile is null)
                return;

            var humanoid = _entMan.System<HumanoidAppearanceSystem>();
            humanoid.LoadProfile(_previewDummy!.Value, Profile);

            if (ShowClothes.Pressed)
				LobbyCharacterPreviewPanel.GiveDummyJobClothes(_previewDummy!.Value, Profile);
				
			if (ShowLoadout.Pressed)
				LobbyCharacterPreviewPanel.GiveDummyLoadoutItems(_previewDummy!.Value, Profile);

            _previewSpriteView.OverrideDirection = (Direction) ((int) _previewRotation % 4 * 2);
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
        }

        private void RandomizeEverything()
        {
            Profile = HumanoidCharacterProfile.Random();
            SetProfile(Profile, CharacterSlot);
            SetDirty();
        }

        private void RandomizeName()
        {
            if (Profile == null) return;
            var name = HumanoidCharacterProfile.GetName(Profile.Species, Profile.Gender);
            SetName(name);
            UpdateNameEdit();
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
        }

        private async void ImportProfile()
=======
            UpdateFlavorTextEdit();
            UpdateSexControls();
            UpdateGenderControls();
            UpdateSkinColor();
            UpdateSpecies();
            UpdateClothingControls();
            UpdateBackpackControls();
            UpdateSpawnPriorityControls();
            UpdateAgeEdit();
            UpdateEyePickers();
            UpdateSpeakerPickers();
            UpdateSaveButton();
            UpdateJobPriorities();
            UpdateAntagPreferences();
            UpdateTraitPreferences();
            UpdateLoadoutPreferences();
            UpdateMarkings();
            RebuildSpriteView();
            UpdateHairPickers();
            UpdateCMarkingsHair();
            UpdateCMarkingsFacialHair();

            _preferenceUnavailableButton.SelectId((int) Profile.PreferenceUnavailable);
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);

            if (_needUpdatePreview)
            {
                UpdatePreview();
                _needUpdatePreview = false;
            }
        }

        private void UpdateJobPriorities()
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
        {
            if (_exporting || CharacterSlot == null || Profile == null)
                return;

            StartExport();
            await using var file = await _dialogManager.OpenFile(new FileDialogFilters(new FileDialogFilters.Group("yml")));

            if (file == null)
            {
                EndExport();
                return;
            }

            try
            {
                var profile = _entManager.System<HumanoidAppearanceSystem>().FromStream(file, _playerManager.LocalSession!);
                var oldProfile = Profile;
                SetProfile(profile, CharacterSlot);

                IsDirty = !profile.MemberwiseEquals(oldProfile);
            }
            catch (Exception exc)
            {
                _sawmill.Error($"Error when importing profile\n{exc.StackTrace}");
            }
            finally
            {
                EndExport();
            }
        }

<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
        private async void ExportProfile()
        {
            if (Profile == null || _exporting)
                return;

            StartExport();
            var file = await _dialogManager.SaveFile(new FileDialogFilters(new FileDialogFilters.Group("yml")));

            if (file == null)
            {
                EndExport();
                return;
            }

            try
            {
                var dataNode = _entManager.System<HumanoidAppearanceSystem>().ToDataNode(Profile);
                await using var writer = new StreamWriter(file.Value.fileStream);
                dataNode.Write(writer);
            }
            catch (Exception exc)
            {
                _sawmill.Error($"Error when exporting profile\n{exc.StackTrace}");
            }
            finally
            {
                EndExport();
                await file.Value.fileStream.DisposeAsync();
=======
        private abstract class RequirementsSelector<T> : Control
        {
            public T Proto { get; }
            public bool Disabled => _lockStripe.Visible;

            protected readonly RadioOptions<int> Options;
            private StripeBack _lockStripe;
            private Label _requirementsLabel;

            protected RequirementsSelector(T proto)
            {
                Proto = proto;

                Options = new RadioOptions<int>(RadioOptionsLayout.Horizontal)
                {
                    FirstButtonStyle = StyleBase.ButtonOpenRight,
                    ButtonStyle = StyleBase.ButtonOpenBoth,
                    LastButtonStyle = StyleBase.ButtonOpenLeft
                };
                //Override default radio option button width
                Options.GenerateItem = GenerateButton;

                Options.OnItemSelected += args => Options.Select(args.Id);

                _requirementsLabel = new Label()
                {
                    Text = Loc.GetString("role-timer-locked"),
                    Visible = true,
                    HorizontalAlignment = HAlignment.Center,
                    StyleClasses = {StyleBase.StyleClassLabelSubText},
                };

                _lockStripe = new StripeBack()
                {
                    Visible = false,
                    HorizontalExpand = true,
                    MouseFilter = MouseFilterMode.Stop,
                    Children =
                    {
                        _requirementsLabel
                    }
                };

                // Setup must be called after
            }

            /// <summary>
            /// Actually adds the controls, must be called in the inheriting class' constructor.
            /// </summary>
            protected void Setup((string, int)[] items, string title, int titleSize, string? description, TextureRect? icon = null)
            {
                foreach (var (text, value) in items)
                {
                    Options.AddItem(Loc.GetString(text), value);
                }

                var titleLabel = new Label()
                {
                    Margin = new Thickness(5f, 0, 5f, 0),
                    Text = title,
                    MinSize = new Vector2(titleSize, 0),
                    MouseFilter = MouseFilterMode.Stop,
                    ToolTip = description
                };

                var container = new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,
                };

                if (icon != null)
                    container.AddChild(icon);
                container.AddChild(titleLabel);
                container.AddChild(Options);
                container.AddChild(_lockStripe);

                AddChild(container);
            }

            public void LockRequirements(FormattedMessage requirements)
            {
                var tooltip = new Tooltip();
                tooltip.SetMessage(requirements);
                _lockStripe.TooltipSupplier = _ => tooltip;
                _lockStripe.Visible = true;
                Options.Visible = false;
            }

            // TODO: Subscribe to roletimers event. I am too lazy to do this RN But I doubt most people will notice fn
            public void UnlockRequirements()
            {
                _lockStripe.Visible = false;
                Options.Visible = true;
            }

            private Button GenerateButton(string text, int value)
            {
                return new Button
                {
                    Text = text,
                    MinWidth = 90
                };
            }
        }

        private sealed class JobPrioritySelector : RequirementsSelector<JobPrototype>
        {
            public JobPriority Priority
            {
                get => (JobPriority) Options.SelectedValue;
                set => Options.SelectByValue((int) value);
            }

            public event Action<JobPriority>? PriorityChanged;

            public JobPrioritySelector(JobPrototype proto, IPrototypeManager protoMan)
                : base(proto)
            {
                Options.OnItemSelected += args => PriorityChanged?.Invoke(Priority);

                var items = new[]
                {
                    ("humanoid-profile-editor-job-priority-high-button", (int) JobPriority.High),
                    ("humanoid-profile-editor-job-priority-medium-button", (int) JobPriority.Medium),
                    ("humanoid-profile-editor-job-priority-low-button", (int) JobPriority.Low),
                    ("humanoid-profile-editor-job-priority-never-button", (int) JobPriority.Never),
                };

                var icon = new TextureRect
                {
                    TextureScale = new Vector2(2, 2),
                    Stretch = TextureRect.StretchMode.KeepCentered
                };
                var jobIcon = protoMan.Index<StatusIconPrototype>(proto.Icon);
                icon.Texture = jobIcon.Icon.Frame0();
				
				var jobName = proto.SponsorOnly ? proto.LocalizedName + " ★" : proto.LocalizedName;

                Setup(items, jobName, 200, proto.LocalizedDescription, icon);
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
            }
        }

        private void StartExport()
        {
            _exporting = true;
            ImportButton.Disabled = true;
            ExportButton.Disabled = true;
        }

        private void EndExport()
        {
<<<<<<< HEAD:Content.Client/Lobby/UI/HumanoidProfileEditor.xaml.cs
            _exporting = false;
            ImportButton.Disabled = false;
            ExportButton.Disabled = false;
=======
            foreach (var preferenceSelector in _traitPreferences)
            {
                var traitId = preferenceSelector.Trait.ID;
                var preference = Profile?.TraitPreferences.Contains(traitId) ?? false;

                preferenceSelector.Preference = preference;
            }
        }
		
		private void UpdateLoadoutPreferences()
		{
			_loadoutPoints.Value = !(Profile is null) && !(_playerManager.LocalPlayer is null) &&
				_sponsorManager.AllowSponsor(_playerManager.LocalPlayer?.Session)
				? SponsorStartLoadoutPoints : BaseStartLoadoutPoints;
			
            _loadoutPoints.MaxValue = !(Profile is null) && !(_playerManager.LocalPlayer is null) &&
				_sponsorManager.AllowSponsor(_playerManager.LocalPlayer?.Session)
				? SponsorStartLoadoutPoints : BaseStartLoadoutPoints;

            if (_loadoutPreferences == null)
                return;

            var points = !(Profile is null) && !(_playerManager.LocalPlayer is null) &&
				_sponsorManager.AllowSponsor(_playerManager.LocalPlayer?.Session)
				? SponsorStartLoadoutPoints : BaseStartLoadoutPoints;
			
            foreach (var preferenceSelector in _loadoutPreferences)
            {
                var loadoutId = preferenceSelector.Loadout.ID;
                var preference = Profile?.LoadoutPreferences.Contains(loadoutId) ?? false;

                preferenceSelector.Preference = preference;

                if (preference)
                {
                    points -= preferenceSelector.Loadout.Cost;
                    _loadoutPoints.Value = points;
                }
            }
        }

        private sealed class AntagPreferenceSelector : RequirementsSelector<AntagPrototype>
        {
            // 0 is yes and 1 is no
            public bool Preference
            {
                get => Options.SelectedValue == 0;
                set => Options.Select((value && !Disabled) ? 0 : 1);
            }

            public event Action<bool>? PreferenceChanged;

            public AntagPreferenceSelector(AntagPrototype proto)
                : base(proto)
            {
                Options.OnItemSelected += args => PreferenceChanged?.Invoke(Preference);

                var items = new[]
                {
                    ("humanoid-profile-editor-antag-preference-yes-button", 0),
                    ("humanoid-profile-editor-antag-preference-no-button", 1)
                };
                var title = Loc.GetString(proto.Name);
                var description = Loc.GetString(proto.Objective);
                Setup(items, title, 250, description);

                // immediately lock requirements if they arent met.
                // another function checks Disabled after creating the selector so this has to be done now
                var requirements = IoCManager.Resolve<JobRequirementsManager>();
                if (proto.Requirements != null && !requirements.CheckRoleTime(proto.Requirements, out var reason))
                {
                    LockRequirements(reason);
                }
            }
        }

        private sealed class TraitPreferenceSelector : Control
        {
            public TraitPrototype Trait { get; }
            private readonly CheckBox _checkBox;

            public bool Preference
            {
                get => _checkBox.Pressed;
                set => _checkBox.Pressed = value;
            }

            public event Action<bool>? PreferenceChanged;

            public TraitPreferenceSelector(TraitPrototype trait)
            {
                Trait = trait;

                _checkBox = new CheckBox {Text = Loc.GetString(trait.Name)};
                _checkBox.OnToggled += OnCheckBoxToggled;

                if (trait.Description is { } desc)
                {
                    _checkBox.ToolTip = Loc.GetString(desc);
                }

                AddChild(new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,
                    Children = { _checkBox },
                });
            }

            private void OnCheckBoxToggled(BaseButton.ButtonToggledEventArgs args)
            {
                PreferenceChanged?.Invoke(Preference);
            }
>>>>>>> master:Content.Client/Preferences/UI/HumanoidProfileEditor.xaml.cs
        }
		
		private sealed class LoadoutPreferenceSelector : Control
        {
            public LoadoutPrototype Loadout { get; }
            private readonly CheckBox _checkBox;

            public bool Preference
            {
                get => _checkBox.Pressed;
                set => _checkBox.Pressed = value;
            }

            public event Action<bool>? PreferenceChanged;

            public LoadoutPreferenceSelector(LoadoutPrototype loadout)
            {
                Loadout = loadout;

                var entman = IoCManager.Resolve<IEntityManager>();
                var dummyLoadout = entman.SpawnEntity(loadout.Prototype, MapCoordinates.Nullspace);
                var loadoutMeta = entman.GetComponent<MetaDataComponent>(dummyLoadout);
                var sprite = entman.GetComponent<SpriteComponent>(dummyLoadout);

                var previewLoadout = new SpriteView
                {
                    Scale = new Vector2(1, 1),
                    OverrideDirection = Direction.South,
                    VerticalAlignment = VAlignment.Center,
                    SizeFlagsStretchRatio = 1
                };
				previewLoadout.SetEntity(dummyLoadout);

                _checkBox = new CheckBox
                {
                    Text = loadout.SponsorOnly ? $"{loadoutMeta.EntityName} [{loadout.Cost}] ★" : $"{loadoutMeta.EntityName} [{loadout.Cost}]",
                    VerticalAlignment = VAlignment.Center
                };
                _checkBox.OnToggled += OnCheckBoxToggled;

                var tooltip = "";
                tooltip += $"{Loc.GetString(loadoutMeta.EntityDescription)}";
                if (loadout.WhitelistJobs != null || loadout.BlacklistJobs != null || loadout.SpeciesRestrictions != null || loadout.SponsorOnly)
                    tooltip += "\n";

                if (loadout.SponsorOnly)
				{
					tooltip += Loc.GetString("humanoid-profile-editor-loadouts-sponsor-only");
					if (loadout.WhitelistJobs != null || loadout.SpeciesRestrictions != null || loadout.BlacklistJobs != null)
						tooltip += "\n";
				}
				
				if (loadout.WhitelistJobs != null)
                {
                    tooltip += Loc.GetString("humanoid-profile-editor-loadouts-selector-whitelist");
                    if (loadout.WhitelistJobs != null)
                        foreach (var require in loadout.WhitelistJobs)
                            tooltip += $"\n - {Loc.GetString($"Job{require}")} ({Loc.GetString("humanoid-profile-editor-loadouts-selector-job")})";
                }

                if (loadout.SpeciesRestrictions != null || loadout.BlacklistJobs != null)
                {
                    tooltip += Loc.GetString("humanoid-profile-editor-loadouts-selector-blacklist");
                    if (loadout.SpeciesRestrictions != null)
                        foreach (var require in loadout.SpeciesRestrictions)
                            tooltip += $"\n - {Loc.GetString($"species-name-{require.ToLower()}")} ({Loc.GetString("humanoid-profile-editor-loadouts-selector-species")})";
                    if (loadout.BlacklistJobs != null)
                        foreach (var require in loadout.BlacklistJobs)
                            tooltip += $"\n - {Loc.GetString($"Job{require}")} ({Loc.GetString("humanoid-profile-editor-loadouts-selector-job")})";
                }

                if (tooltip != "")
                {
                    _checkBox.ToolTip = tooltip;
                    _checkBox.TooltipDelay = 0.2f;
                }

                AddChild(new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,
                    Children = { previewLoadout, _checkBox },
                });
            }

            private void OnCheckBoxToggled(BaseButton.ButtonToggledEventArgs args)
            {
                PreferenceChanged?.Invoke(Preference);
            }
        }
    }
}